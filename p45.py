"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

Lösung: 
T55385 = P31977 = H27693 = 1533776805
T10744501 = P6203341 = H5372251 = 57722156241751
T98808073 = P57046868 = H49404037 = 4881517694390701
T186871645 = P107890395 = H93435823 = 17460505945938836
T200495127 = P115755916 = H100247564 = 20099148075620628
T288558699 = P166599443 = H144279350 = 41633061528565648
T376622271 = P217442970 = H188311136 = 70922167694909856
T390245753 = P225308491 = H195122877 = 76145874062391376
...
"""

import sys
import math

def calc_triangle(n):
    return (n * (n + 1)) / 2

def calc_pentagonal(n):
    return (n * (3 * n - 1)) / 2

def calc_hexagonal(n):
    return (n * (2 * n - 1))

# reversal functions
def calc_pentagonal_m1(Pn): # h: [0.33;infinity[ -> R+0 ; P^-1(n)
    n = (1 + math.sqrt(1-(4*3*(-2*Pn))))/6
    if n%1 == 0:
        return n
    return -1

def calc_hexagonal_m1(Hn): # H^-1(n)
    n = (1 + math.sqrt(1-(4*2*(-1*Hn))))/4
    if n%1 == 0:
        return n
    return -1

for i in range(99999999999999):
    res_tri = calc_triangle(i)
    if calc_pentagonal_m1(res_tri) > 0:
        if calc_hexagonal_m1(res_tri) > 0:
            print("T" + str(i) + " = " + 
            "P" + "{:.0f}".format(calc_pentagonal_m1(res_tri)) + " = " + 
            "H" + "{:.0f}".format(calc_hexagonal_m1(res_tri)) + " = " + 
            "{:.0f}".format(res_tri))
